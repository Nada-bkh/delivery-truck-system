version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: "truck-route-updates:1:1,truck-updates:1:1,truck-data:1:1,truck-stops:1:1"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: ./backend
    ports:
      - "3000:3000"
    depends_on:
      kafka:
        condition: service_healthy
      osrm:
        condition: service_healthy
    restart: always
    environment:
      - KAFKA_BROKERS=kafka:9092
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend/frontend
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_healthy
    restart: always
    networks:
      - iot-network

  # Carbon emissions optimizer service
  carbon-optimizer:
    build: 
      context: ./simulator
      dockerfile: Dockerfile.optimizer
    depends_on:
      backend:
        condition: service_healthy
      osrm:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - BACKEND_URL=http://backend:3000
      - OSRM_URL=http://osrm:5000
      - LOG_LEVEL=INFO
    restart: always
    networks:
      - iot-network

  # Main truck movement simulator
  truck-simulator:
    build: 
      context: ./simulator
      dockerfile: Dockerfile.simulator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=INFO
    restart: always
    networks:
      - iot-network

  # Truck rest stops simulator
  truck-stops-simulator:
    build: 
      context: ./simulator
      dockerfile: Dockerfile.stops
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=INFO
    restart: always
    networks:
      - iot-network

  osrm:
    image: osrm/osrm-backend:latest
    volumes:
      - ./osrm-data:/data
      - ./osrm-profiles:/profiles
    command: >
      sh -c "
        if [ ! -f /data/tunisia-latest.osrm ]; then
          osrm-extract -p /profiles/truck.lua /data/tunisia-latest.osm.pbf &&
          osrm-partition /data/tunisia-latest.osrm &&
          osrm-customize /data/tunisia-latest.osrm;
        fi &&
        osrm-routed --algorithm mld /data/tunisia-latest.osrm"
    ports:
      - "5000:5000"
    networks:
      - iot-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  iot-network:
    driver: bridge